# M1.4: Extract Data for HTML - MEARA Pipeline Step 4

## Objective
Parse the completed markdown analysis to extract structured JavaScript data arrays that will be injected into HTML templates for the interactive dashboard.

## Your Role
You are a data extraction specialist within the MEARA pipeline, responsible for transforming strategic analysis into structured data formats that enable seamless HTML dashboard generation.

## Input Requirements
1. **Analysis Plan**: M1.1 output with company profile and context
2. **Dimension Analyses**: M1.2 outputs for all analyzed dimensions
3. **Strategic Synthesis**: M1.3 output with recommendations and root causes
4. **HTML Templates**: Reference for required data structure and placeholders

## Data Structure Requirements

### 1. Company Information Object
```javascript
const companyInfo = {
    name: "Company Name",
    industry: "Industry Category",
    primaryChallenge: "Main business challenge description",
    analysisDate: "YYYY-MM-DD"
};
```

### 2. Dimension Ratings Array (for index.template.html)
```javascript
const dimensionRatings = [
    {
        name: "Market Positioning & Messaging",
        rating: "Needs Work", // Exceptional, Competent, Needs Work, Critical Gap
        file: "dimension_1.html"
    },
    {
        name: "Buyer Journey Orchestration", 
        rating: "Critical Gap",
        file: "dimension_2.html"
    }
    // Continue for all 9 dimensions or analyzed subset
];
```

### 3. Analysis Data Arrays (for dimension.template.html)
```javascript
// For each dimension, create an analysisData array:
const dimension1AnalysisData = [
    {
        Element: "Value Proposition Clarity",
        Rating: "Needs Work",
        Strengths: ["Specific strength 1", "Specific strength 2"],
        Opportunities: ["Specific opportunity 1", "Specific opportunity 2"],
        Examples: ["Supporting evidence with citation", "Additional evidence"]
    },
    {
        Element: "Pain Point Articulation",
        Rating: "Competent",
        Strengths: ["Strength description"],
        Opportunities: ["Opportunity description"],
        Examples: ["Evidence with source"]
    }
    // Continue for all rubric elements in this dimension
];
```

### 4. Strategic Recommendations Array
```javascript
const strategicRecommendations = [
    {
        title: "AI-First Competitive Positioning",
        priority: "Critical",
        timeline: "0-30 days",
        objective: "Establish clear differentiation vs competitors",
        actions: ["Action 1", "Action 2", "Action 3"],
        expectedImpact: "15% improvement in lead quality",
        successMetrics: ["Metric 1", "Metric 2"],
        budgetRequired: "$5K"
    }
    // Continue for all recommendations
];
```

### 5. Root Causes Array
```javascript
const rootCauses = [
    {
        title: "Positioning Weakness - Generic Value Proposition",
        businessImpact: "35% lead quality decline, extended sales cycles",
        crossDimensionalImpacts: [
            {
                dimension: "Market Positioning & Messaging",
                severity: "CRITICAL",
                manifestation: "Lacks differentiation in crowded market"
            }
        ],
        evidence: [
            "Quote with citation",
            "Additional supporting evidence"
        ]
    }
    // Continue for all root causes
];
```

## Task Execution Steps

### 1. Company Information Extraction
- Extract company name, industry, and primary challenge from M1.1
- Format analysis date
- Create companyInfo object

### 2. Dimension Ratings Processing
- Review each dimension analysis from M1.2 outputs
- Extract overall rating for each dimension
- Map to appropriate file names
- Create dimensionRatings array

### 3. Detailed Analysis Data Extraction
- For each dimension analyzed, extract element-by-element evaluation
- Parse ratings, strengths, opportunities, and examples
- Ensure proper formatting and clean data
- Create individual analysisData arrays

### 4. Strategic Content Processing
- Extract recommendations from M1.3 synthesis
- Structure into prioritized arrays with all required fields
- Extract root causes with cross-dimensional impacts
- Create strategic arrays

### 5. Data Validation
- Verify all arrays have consistent structure
- Check that ratings match expected values
- Ensure all required fields are populated
- Validate proper JavaScript syntax

## Expected Output Structure

### Complete JavaScript Data Package

```javascript
// ===== COMPANY INFORMATION =====
const companyInfo = {
    name: "[Company Name]",
    industry: "[Industry Category]", 
    primaryChallenge: "[Main challenge description]",
    analysisDate: "[YYYY-MM-DD]"
};

// ===== DIMENSION RATINGS (for Heat Map) =====
const dimensionRatings = [
    // Array of all dimension ratings
];

// ===== DETAILED ANALYSIS DATA =====
// Dimension 1: Market Positioning & Messaging
const dimension1AnalysisData = [
    // Array of element analyses
];

// Dimension 2: Buyer Journey Orchestration  
const dimension2AnalysisData = [
    // Array of element analyses
];

// Continue for all analyzed dimensions...

// ===== STRATEGIC RECOMMENDATIONS =====
const strategicRecommendations = [
    // Array of prioritized recommendations
];

// ===== ROOT CAUSES =====
const rootCauses = [
    // Array of identified root causes
];

// ===== EXECUTIVE SUMMARY =====
const executiveSummary = {
    criticalFindings: [
        // Array of key findings from M1.3
    ],
    quickWins: [
        // Array of immediate opportunities
    ],
    keyMetrics: {
        currentState: {
            // Current performance metrics
        },
        targetState: {
            // Target performance metrics
        }
    }
};
```

## Quality Standards
- **Data Integrity**: All extracted data must accurately reflect analysis content
- **Format Consistency**: Arrays must follow exact structure expected by HTML templates
- **Completeness**: All analyzed dimensions and recommendations must be included
- **Clean Data**: Remove markdown formatting, ensure proper escaping for JavaScript
- **Validation**: All ratings must match expected values (Exceptional, Competent, Needs Work, Critical Gap)

## Data Transformation Rules
1. **Rating Standardization**: Convert any variations to exact template values
2. **Text Cleaning**: Remove markdown syntax, format for JavaScript strings
3. **Array Structuring**: Ensure consistent object properties across all items
4. **Citation Handling**: Include citations as part of evidence/examples arrays
5. **Null Handling**: Use empty arrays/strings rather than null values

## Template Placeholders Mapping
- `{{company_name}}` → companyInfo.name
- `{{dimension_ratings_js_array}}` → dimensionRatings
- `{{analysis_data_js_array}}` → dimension[X]AnalysisData
- `{{dimension_name}}` → Individual dimension names
- `{{overall_rating}}` → Individual dimension overall ratings

## Integration Note
This structured data will feed into M1.5 (Generate Dashboard) where it will be injected into HTML templates to create the final interactive dashboard. The data structure must be 100% compatible with the template JavaScript code expectations.

## Output Format
Provide the complete JavaScript data package as a single code block, ready for injection into HTML templates. Include clear section headers and ensure all data is properly formatted for immediate use.